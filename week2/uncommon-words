class Solution {
public:
    vector<string> uncommonFromSentences(string A, string B)
    {
        vector<string> answer;
        set<string> a_words;
        set<string> b_words;
        set<string> avoid_words;
        int alen = A.length();
        int blen = B.length();
        string current = "";
        for(int i = 0; i < alen; ++i)
        {
            if(A[i] != ' ')
            {
                current += A[i];
            }
            else if(current != "")
            {
                if(a_words.find(current) != a_words.end())
                {
                    avoid_words.insert(current);
                }
                a_words.insert(current);
                current = "";
            }
        }
        if(A[alen - 1] != ' ')
        {
            if(a_words.find(current) != a_words.end())
            {
                avoid_words.insert(current);
            }
            a_words.insert(current);
        }
        current = "";
        set<string>::iterator a_check = a_words.end();
        
        for(int i = 0; i < blen; ++i)
        {
            if(B[i] != ' ')
            {
                current += B[i];
            }
            else if(current != "")
            {
                if(b_words.find(current) != b_words.end())
                {
                    avoid_words.insert(current);
                }
                b_words.insert(current);
                current = "";
            }
        }
        if(B[blen - 1] != ' ')
        {
            if(b_words.find(current) != b_words.end())
            {
                avoid_words.insert(current);
            }
            b_words.insert(current);
        }
        set<string>::iterator b_check = b_words.end();
        set<string>::iterator avoid_check = avoid_words.end();
        
        for(string word : a_words)
        {
            if(b_words.find(word) == b_check && avoid_words.find(word) == avoid_check)
            {
                answer.push_back(word);
            }
        }
        for(string word : b_words)
        {
            if(a_words.find(word) == a_check && avoid_words.find(word) == avoid_check)
            {
                answer.push_back(word);
            }
        }
        return answer;
    }
};
