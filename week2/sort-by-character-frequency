class Solution {
public:
    static bool pairlt(pair<char, int> a, pair<char, int> b)
    {
        return a.second < b.second;
    }
    
    string frequencySort(string s)
    {
        string final_string;
        map<char, int> counter;
        int len = s.length();
        for(int i = 0; i < len; ++i)
        {
            ++counter[s[i]];
        }
        priority_queue<pair<char, int>, vector<pair<char, int>>, std::function<bool(pair<char, int>, pair<char, int>)>> answer(pairlt);
        for(pair<char, int> meep : counter)
        {
            answer.push(meep);
        }
        int times;
        while(!answer.empty())
        {
            times = answer.top().second;
            for(int i = 0; i < times; ++i)
            {
                final_string += answer.top().first;
            }
            answer.pop();
        }
        return final_string;
    }
};
